---
title: "BCB 520 - The Final Project"
subtitle: "Mutations in Molecular Chaperone: Hsp90 Elicit Different Proteomic Responses"
format:
  html:
    toc: false
    echo: true
author: "Erick Rios"
date: "2023-05-03"
categories: [Portfolio, DataViz, Network, Project, Hsp90, Mutations]
image: "yeastbud.png"
description: "Network visualization and analysis of proteomic responses to Hsp90 mutation."
code-fold: true
code-tools: true
bibliography: references.bib
---

# The Preamble

The focus of my research is the study of Hsp90 molecular chaperone. Over the decades we come to realize this chaperone sits as a major hub of protein-protein interactions [@Gopinath2014; @Zhao2005a; @Rizzolo2019] in which it regulates the folding, activity, and degradation of its clients.

The current study expands the preliminary proteomic analysis previously done in yeast by us[@Hohrman2021], here we use quantitative proteomic analysis to compare extracts from yeast expressing wild-type yeast Hsp90 to nine different mutants. Our results demonstrate that the mutants elicit varied proteomic responses, even though the cells were harvested at temperatures that do not significantly affect growth. Overall, our results suggest:

1.  It is possible to selectively inhibit Hsp90 function *in vivo*, and

2.  Identifies **cellular processes** and/or likely **clients** that may be differentially affected by Hsc82 mutation.

# Data

Data source:

1.  Main data used in this analysis are the results of Data Independent Acquisition Mass Spectrometry (DIA-MS) experiments, a technique for quantitative proteomics. This is the crux of our study. For brevity, the data has been pre-filtered for significant hits of interest for analysis.

A significant hit in our study is a protein whose abundance had a \|Log~2~ Fold Change\| (LogFC) greater than 1.5, relative to wild-type.

```{r}
# Load in our data
proteomic <- read.csv("trimmed_proteomic_Data.csv")
```

Data Dictionary #1

```{r}
```

2.  Supporting data/information publicly available on *Saccharomyces Genome Database ([SGD](https://yeastgenome.org/ "Saccharomyces Genome Database main page"))*

-   List of currently known protein **physical** interactors of Hsp90 (Both [Hsc82](https://yeastgenome.org/locus/S000004798/interaction "List of Hsc82 genetic and physical interactors") and [Hsp82](https://yeastgenome.org/locus/S000006161/interaction "List of Hsp82 genetic and physical interactors") isoforms)
-   List of currently known protein **genetic** interactors of Hsp90 (Both [Hsc82](https://yeastgenome.org/locus/S000004798/interaction "List of Hsc82 genetic and physical interactors") and [Hsp82](https://yeastgenome.org/locus/S000006161/interaction "List of Hsp82 genetic and physical interactors") isoforms)
-   Hits from our data analyzed by [Gene Ontology (GO) Slim Mapper](https://yeastgenome.org/goSlimMapper "Gene Ontology tool to classify and group genes/proteins") \# Visualization

```{r}

Hsp90.Interactors <- read.csv("SGD_All_interactions_Hsp90_with_Refs_trimmed.csv", header = TRUE, stringsAsFactors = FALSE)

```

Data Dictionary #2

```{r}
GO.terms <- read.table(file = "GO Slim Mapper Results.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
```

Data Dictionary #3

```{r}
```

# Visualizations

## Figure 1

```{r}
#| message: false
#| warning: false
library(igraph)
library(tidyr)
library(viridis)
```

```{r}
#| warning: false

### Trim and format the Gene Ontology: Process data

# Calculate GO process enrichment
GO.terms$CLUSTER_FREQUENCY <- as.numeric(sub("%", "", GO.terms$CLUSTER_FREQUENCY))/100
GO.terms$GENOME_FREQUENCY <- as.numeric(sub("%", "", GO.terms$GENOME_FREQUENCY))/100
GO.terms$Enrichment <- GO.terms$CLUSTER_FREQUENCY/GO.terms$GENOME_FREQUENCY
# Take top 5 enriched processes that have at least 5 proteins annotated to a cellular process.
GO.terms5 <- GO.terms[GO.terms$NUM_LIST_ANNOTATIONS >= 5,]
GO.terms5 <- GO.terms5[order(GO.terms5$Enrichment, decreasing = T),]
GO.terms5 <- GO.terms5[1:5, c(1,2,9,10)]
# Format for network
GO.terms5.split <- separate_rows(GO.terms5, ANNOTATED_GENES, sep = ", ")

###

# Make initial network
vertices <- unique(c(GO.terms5.split$TERM, GO.terms5.split$ANNOTATED_GENES))
g <- graph_from_data_frame(GO.terms5.split[,2:3], directed = F, vertices = vertices)

###

# create layout using force directed algorithm

layout <- layout_with_fr(g, weights = GO.terms5.split$Enrichment, coords = matrix(data = 0, nrow = 91, ncol = 2))

###

# Add mutant nodes 

mutants <- matrix(c(cos(seq(0, 2*pi, length.out = 10)), 
                    sin(seq(0, 2*pi, length.out = 10))), ncol = 2)*11 # Create coordinates for a ring.

g <- add_vertices(g, 9)

mutant.names <- c("R46G", "G309S", "S481Y", "A583T", "K102E", "S25P", "Q380K", "G424D", "W296A")

V(g)$name[92:100] <- mutant.names

# and edges between mutants and proteins/genes

edgelist <- proteomic[,c(3,5)][proteomic$Gene %in% GO.terms5.split$ANNOTATED_GENES,]

# Convert edge list to indices
edgelist$from <- match(edgelist$contrast, V(g)$name)
edgelist$to <- match(edgelist$Gene, V(g)$name)

# create a list of alternating values from 'from' and 'to' columns
edges <- c(rbind(edgelist$from, edgelist$to))

g <- add_edges(g, edges = edges)

###

# Assign node colors based on physical, genetic, both (mixed), interaction with Hsp90 or neither (unknown)

proteomic$Interaction <- "Unknown"

proteomic$Interaction[proteomic$Systemic.name %in% Hsp90.Interactors$Systemic.Name[Hsp90.Interactors$TYPE=="Genetic"]] <- "Genetic"

proteomic$Interaction[proteomic$Systemic.name %in% Hsp90.Interactors$Systemic.Name[Hsp90.Interactors$TYPE=="Physical"]] <- "Physical"

proteomic$Interaction[proteomic$Systemic.name %in% Hsp90.Interactors$Systemic.Name[Hsp90.Interactors$TYPE=="Physical"] &
                        proteomic$Systemic.name %in% Hsp90.Interactors$Systemic.Name[Hsp90.Interactors$TYPE=="Genetic"]] <- "Mixed"

# Define color palette for the color blind plebs, just kidding, but not really
colors <- viridis(n = 4, option = "D", alpha = 1, begin = 0, end = 1, direction = -1)
colors.process <- viridis(n = 5, option = "F", alpha = 1, begin = 0, end = 1, direction = -1)
proteomic$Int.color <- colors[match(proteomic$Interaction, unique(proteomic$Interaction))]

V(g)$color <- c(colors.process, 
                proteomic$Int.color[match(V(g)$name, proteomic$Gene)][6:91],
                rep("white", 9)
                )
V(g)$color[23] <- "#35B779FF"

### 
#colors2 <- viridis(n = 9, option = "D", alpha = .25, begin = 0, end = 1, direction = -1)

# E(g)$color <- c(rep(colors2[1], degree(g,1)),
#                 rep(colors2[2], degree(g,2)),
#                 rep(colors2[3], degree(g,3)),
#                 rep(colors2[4], degree(g,4)),
#                 rep(colors2[5], degree(g,5)),
#                 rep(colors2[6], degree(g,6)),
#                 rep(colors2[7], degree(g,7)),
#                 rep(colors2[8], degree(g,8)),
#                 rep(colors2[9], degree(g,9))
#                 )

###

# Modify node size, shape, and labels to display
term.count <-  length(unique(GO.terms5.split$TERM))
node.count <- length(unique(GO.terms5.split$ANNOTATED_GENES))

V(g)$size <- c(rep(12, term.count), rep(5, node.count), rep(0, 9))

V(g)$label <- c(rep("", 91), mutant.names)

V(g)$shape <- c(rep("circle", term.count), rep("square" , node.count), rep("none", 9))
###

plot(g,
     layout = rbind(layout, mutants[1:9,1:2]),
     margin = -.8, # allow the network to use up more of the margin
     vertex.label.cex = 1,
     vertex.label.font = 2, # Bold
     vertex.label.color= "black",
     edge_arrow_mode = 0,
     vertex.color = V(g)$color,
     xlim=c(-5, 1.75), ylim=c(-2, 2) # Increase the plot size to help accommodate the network
)

legend("topleft", legend=unique(proteomic$Interaction), fill=unique(V(g)$color)[6:91], title = "Hsp90 Interaction Type", cex = .75)

legend("bottomleft", legend= V(g)$name[1:5], title = "GO Process", cex = .75, pch = 21, pt.cex = 2, pt.bg = V(g)$color[1:5], pt.lwd = 0.5)
```

### NODES

Since our objective is to construct a protein interaction network, intuitively our nodes will be our significant hits found in our study. However, we must also include our experimental variables, in this case single point mutations in the Hsp90 chaperone.

### EDGES

Now we must establish the relationship between these nodes. Starting with the relationship between our protein hits and experimental variables (Hsp90 mutants). These proteins were found to have a significant change in abundance when at least one mutant Hsp90 is expressed as the sole source of Hsp90.

### Layout

# Conlusions

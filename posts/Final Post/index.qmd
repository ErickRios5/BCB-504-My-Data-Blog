---
title: "BCB 520 - The Final Project"
subtitle: "Mutations in Molecular Chaperone: Hsp90 Elicit Different Proteomic Responses"
format:
  html:
    toc: false
    echo: true
author: "Erick Rios"
date: "2023-05-03"
categories: [Portfolio, DataViz, Network, Project, Hsp90, Mutations]
image: "yeastbud.png"
description: "Network visualization and analysis of proteomic responses to Hsp90 mutation."
code-fold: true
code-tools: true
bibliography: references.bib
---

# The Preamble

The focus of my research is the study of Hsp90 molecular chaperone. Over the decades we come to realize this chaperone sits as a major hub of protein-protein interactions [@Gopinath2014; @Zhao2005a; @Rizzolo2019] in which it regulates the folding, activity, and degradation of its clients.

The current study expands the preliminary proteomic analysis previously done in yeast by us[@Hohrman2021], here we use quantitative proteomic analysis to compare extracts from yeast expressing wild-type yeast Hsp90 to nine different mutants. Our results demonstrate that the mutants elicit varied proteomic responses, even though the cells were harvested at temperatures that do not significantly affect growth. Overall, our results suggest:

1.  It is possible to selectively inhibit Hsp90 function *in vivo*, and

2.  Identifies **cellular processes** and/or likely **clients** that may be differentially affected by Hsc82 mutation.

# Data

Data source:

1.  Main data used in this analysis are the results of Data Independent Acquisition Mass Spectrometry (DIA-MS) experiments, a technique for quantitative proteomics. This is the crux of our study. For brevity, the data has been pre-filtered for significant hits of interest for analysis.

A significant hit in our study is a protein whose abundance had a \|Log~2~ Fold Change\| (LogFC) greater than 1.5, relative to wild-type.

```{r}
# Load in our data
proteomic <- read.csv("trimmed_proteomic_Data.csv")
```

Data Dictionary #1

```{r}
```

2.  Supporting data/information publicly available on *Saccharomyces Genome Database ([SGD](https://yeastgenome.org/ "Saccharomyces Genome Database main page"))*

-   List of currently known protein **physical** interactors of Hsp90 (Both [Hsc82](https://yeastgenome.org/locus/S000004798/interaction "List of Hsc82 genetic and physical interactors") and [Hsp82](https://yeastgenome.org/locus/S000006161/interaction "List of Hsp82 genetic and physical interactors") isoforms)
-   List of currently known protein **genetic** interactors of Hsp90 (Both [Hsc82](https://yeastgenome.org/locus/S000004798/interaction "List of Hsc82 genetic and physical interactors") and [Hsp82](https://yeastgenome.org/locus/S000006161/interaction "List of Hsp82 genetic and physical interactors") isoforms)
-   Hits from our data analyzed by [Gene Ontology (GO) Slim Mapper](https://yeastgenome.org/goSlimMapper "Gene Ontology tool to classify and group genes/proteins") \# Visualization

```{r}
# Use read.table() to read in the file
# Hsp90.Interactors <- read.table(file_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)

```

Data Dictionary #2

```{r}
GO.terms <- read.table(file = "GO Slim Mapper Results.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
```

Data Dictionary #3

```{r}
```

# Visualizations
## Figure 1: Hsp90 Mutant-Protein Network of Significant Hits

```{r}
#| message: false
#| warning: false
library(igraph)
```

### NODES

Since our objective is to construct a protein interaction network, intuitively our nodes will be our significant hits found in our study. However, we must also include our experimental variables, in this case single point mutations in the Hsp90 chaperone, this will help promote separation/clustering between nodes later when we apply our measurements from DIA-MS.

```{r}
# Visualize 350 nodes corresponding to the significant hits in our data
nodes <- unique(c(proteomic$contrast, proteomic$Gene))

g <- make_empty_graph(directed = FALSE)
g <- add_vertices(g, length(nodes))
V(g)$name <- nodes

plot(g, 
     margin = -.4,
     vertex.size = 4,
     vertex.label.cex = .5,
     xlim=c(-1.5, 1.5), ylim=c(-1.5,1.5) 
     )
```
In this circle of nodes we have our 9 Hsp90 mutants and 350 proteins that had a significant change in protein abundance in at least one mutant strain.

### EDGES

Now we must establish the relationship between these nodes. Starting with the relationship between our protein hits and experimental variables (Hsp90 mutants). These proteins were found to have a significant change in abundance when at least one mutant Hsp90 is expressed as the sole source of Hsp90.

```{r}
edges <- data.frame(
  from = proteomic$Gene,
  to = proteomic$contrast,
  LogFC = proteomic$logFC,
  p = proteomic$P.Value
  
)

# Convert edge list to indices
edges$from <- match(edges$from, nodes)
edges$to <- match(edges$to, nodes)

# create a list of alternating values from 'from' and 'to' columns
edge_list <- c(rbind(edges$from, edges$to))

g <- add_edges(g, edges = edge_list)

# Specify edge length based on attribute: LogFC

edge_weights <- abs(edges$LogFC)
E(g)$weight <- edge_weights
```

### Default Network

```{r}
# Plot the network
plot(g)
```

Nice, we now have the results of our DIA-MS experiments for each mutant 'condition' visualized as a network. However, I think it is safe to say it is garbage and unintelligible as-is. Let's make some conscious design choices to make this at least visually pleasing to the eye. Bonus points if it reveals something cool!

### Make it pretty 
```{r}
# Nodes
nodes <- unique(c(proteomic$contrast, proteomic$Gene))

g <- make_empty_graph(directed = FALSE)
g <- add_vertices(g, length(nodes))

# set all vertex labels to an empty string
V(g)$label <- ""

# manually assign labels to the 9 (mutant) nodes
V(g)$label[1:9] <- nodes[1:9]

# Manually enlarge the mutant nodes
V(g)$size <- 5
V(g)[1:9]$size <- 0

# Hide mutant nodes, but leave labels
V(g)$shape <- "circle"
V(g)$shape[1:9] <- "none"

# Change vertex color
V(g)$color <- "white"

# Edges
edges <- data.frame(
  from = proteomic$Gene,
  to = proteomic$contrast,
  LogFC = proteomic$logFC,
  p = proteomic$P.Value
  
)

# Convert edge list to indices
edges$from <- match(edges$from, nodes)
edges$to <- match(edges$to, nodes)

# create a list of alternating values from 'from' and 'to' columns
edge_list <- c(rbind(edges$from, edges$to))

g <- add_edges(g, edges = edge_list)

# Specify edge length based on attribute: LogFC
# "Undo" the Log (base: 2) so that larger LogFC values have more 'weight'
# add 10 to all values to help make the network physically smaller.

edge_weights <- abs(edges$LogFC)^3
E(g)$weight <- edge_weights

# c <- cluster_louvain(g, resolution = 1.7)

# Fix coordinates of mutants
fixed_coords <- cbind(cos(seq(0, 7/4*pi, length.out=9)), sin(seq(0, 7/4*pi, length.out=9)))
fixed_coords <- rbind(fixed_coords, data.frame(V1 = rep(0, 350), V2 = rep(0, 350)))  # add coordinate for protein nodes

# Set fixed nodes in layout matrix
layout <- as.matrix(fixed_coords)

set.seed(420)
layout2 <- layout_randomly(g)
layout2[1:9,1:2] <- layout[1:9,1:2]

layout3 <- layout_with_fr(graph = g, coords = layout2, start.temp = .1)

# layout3[1:9,1:2] <- layout[1:9,1:2]
# 
# layout3 <- layout_with_fr(graph = g, coords = layout2, start.temp = .1, niter = 5,  )

# Plot the network

plot(g,
     layout = layout,
     margin = -.8, # allow the network to use up more of the margin
     vertex.label.cex = .5,
     vertex.label.font = 2, # Bold
     edge_arrow_mode = 0,
     xlim=c(-1.75, 1.75), ylim=c(-1.75, 1.75) # Increase the plot size to help accommodate the network
)

plot(g,
     layout = layout2,
     margin = -.8, # allow the network to use up more of the margin
     vertex.label.cex = .5,
     vertex.label.font = 2, # Bold
     edge_arrow_mode = 0,
     xlim=c(-1.75, 1.75), ylim=c(-1.75, 1.75) # Increase the plot size to help accommodate the network
)

plot(g,
     layout = layout3,
     margin = -.8, # allow the network to use up more of the margin
     vertex.label.cex = .5,
     vertex.label.font = 2, # Bold
     edge_arrow_mode = 0,
     xlim=c(-1.75, 1.75), ylim=c(-1.75, 1.75) # Increase the plot size to help accommodate the network
)
```

Design choices: We are more interested in results as a whole and not individual proteins (for now at least), node size was decreased and labels removed; To help distinguish between the 2 node classes/groups: Hsp90 mutations and Proteins, the mutant node shapes were removed, leaving behind the label.

## Integrate Hsp90 Interactor data and results from Gene Ontology.
```{r}
library(tidyr)

# Create an example data frame
df <- data.frame(group = c(1, 2, 3),
                 members = c("A, B, C", "D, E, F", "G, H"))

# Separate the comma-separated values in the "members" column into separate rows
df_split <- separate_rows(df, members, sep = ", ")

# View the resulting data frame
df_split

```

```{r}
# all vertex shapes, minus "raster", that might not be available
shapes <- setdiff(shapes(), "")
g <- make_ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
     vertex.size=15, vertex.size2=15,
     vertex.pie=lapply(shapes, function(x) if (x=="pie") 2:6 else 0),
     vertex.pie.color=list(heat.colors(5)))

# add new vertex shape, plot nothing with no clipping
add_shape("nil")
plot(g, vertex.shape="nil")
```

```{r}
# create a sample data frame with 9 sets of measurements
set.seed(123)
df <- data.frame(cond1 = rnorm(10), cond2 = rnorm(10), cond3 = rnorm(10),
                 cond4 = rnorm(10), cond5 = rnorm(10), cond6 = rnorm(10),
                 cond7 = rnorm(10), cond8 = rnorm(10), cond9 = rnorm(10))

# calculate the correlation matrix between all pairs of conditions
cor_matrix <- cor(df)
```

```{r}
library(igraph)

set.seed(1234)

# create a random igraph network
g <- erdos.renyi.game(10, 0.2)

# assign a group number to each node
V(g)$group <- sample(1:3, 10, replace=TRUE)

# plot the igraph network with the group annotation
plot(g, vertex.color=V(g)$group, vertex.size=20, vertex.label=NA, 
     main="Igraph network with group annotation")
legend("topleft", legend=unique(V(g)$group), fill=unique(V(g)$group))

```

```{r}
library(igraph)

set.seed(1234)

# create a random igraph network
g <- erdos.renyi.game(10, 0.2)

# assign a group number to each node
V(g)$group <- sample(1:3, 10, replace=TRUE)

# detect communities using Louvain algorithm
c <- cluster_louvain(g)

# plot the igraph network with group annotation and cluster highlighting
plot(c, g, vertex.color=V(g)$group, vertex.size=20, vertex.label=NA, 
     mark.groups=TRUE, mark.border=2, main="Igraph network with group and cluster annotation")
legend("topleft", legend=unique(V(g)$group), fill=unique(V(g)$group))

```

```{r}
# # Create an example graph with groups assigned to nodes
# g <- graph_from_data_frame(data.frame(from = sample(1:10, 20, replace = TRUE), 
#                                       to = sample(1:10, 20, replace = TRUE)))
# V(g)$group <- sample(1:3, 10, replace = TRUE)
# 
# # Set colors for the groups
# group_colors <- c("red", "green", "blue")
# 
# # Assign initial coordinates to nodes in a circle
# coords <- layout_in_circle(g)
# 
# # Apply Kamada-Kawai layout to cluster nodes by group
# layout <- layout_with_kk(g, initial = coords, 
#                          dim = 2, 
#                          niter = 1000,
#                          user.weights = V(g)$group,
#                          weight.exp = 1)
# 
# # Plot the graph with clustered nodes and group annotations
# plot(g, 
#      layout = layout, 
#      vertex.color = group_colors[V(g)$group],
#      vertex.label.color = "black", 
#      vertex.label.family = "sans", 
#      vertex.label.cex = 1, 
#      vertex.size = 20, 
#      margin = -0.5, 
#      vertex.shape = "circle",
#      edge.color = "gray")
# 
# # Add group annotations
# for (group in unique(V(g)$group)) {
#   members <- V(g)$name[V(g)$group == group]
#   x <- mean(layout[V(g)$name %in% members, 1])
#   y <- mean(layout[V(g)$name %in% members, 2])
#   text(x, y, paste0("Group ", group), col = group_colors[group], font = 2, cex = 2)
# }


```

```{r}
library(igraph)

# Create an empty graph with 10 nodes arranged in a ring
g <- make_empty_graph(10)
g <- add_edges(g, c(1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1))

# Set initial layout
layout <- layout_with_fr(g)

# Set coordinates for the first 9 nodes in a ring formation
fixed_coords <- cbind(cos(seq(0, 7/4*pi, length.out=9)), sin(seq(0, 7/4*pi, length.out=9)))
fixed_coords <- rbind(fixed_coords, c(0,0))  # add coordinate for 10th node

# Set fixed nodes in layout matrix
layout[1:10,] <- fixed_coords

# Plot the graph with fixed positions for the first 9 nodes
plot(g, layout = layout)


```

# Conlusions
